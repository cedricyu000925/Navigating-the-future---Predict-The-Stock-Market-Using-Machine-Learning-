{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMONyad62c8fmhLJNQptcqV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import yfinance as yf\n","import pandas as pd\n","import os\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import precision_score\n","import matplotlib.pyplot as plt"],"metadata":{"id":"VgY0BVWr3XOI","executionInfo":{"status":"ok","timestamp":1725435136390,"user_tz":-480,"elapsed":325,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":40,"outputs":[]},{"cell_type":"markdown","source":["**Cleaning and Visualizing Our Stock Market Data**"],"metadata":{"id":"krs-c8e9-bVK"}},{"cell_type":"code","source":["# Load the data\n","if os.path.exists(\"sp500.csv\"):\n","    sp500 = pd.read_csv(\"sp500.csv\", index_col=0)\n","else:\n","    sp500 = yf.Ticker(\"^GSPC\")\n","    sp500 = sp500.history(period=\"max\")\n","    sp500.to_csv(\"sp500.csv\")"],"metadata":{"id":"w2jnoV7c3fn_","executionInfo":{"status":"ok","timestamp":1725435137589,"user_tz":-480,"elapsed":8,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["# Drop the specified columns\n","sp500_cleaned = sp500.drop(columns=[\"Dividends\", \"Stock Splits\"])"],"metadata":{"id":"Xy1W2zuc4up3","executionInfo":{"status":"ok","timestamp":1725435138660,"user_tz":-480,"elapsed":4,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["# Display the cleaned DataFrame\n","sp500_cleaned.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"_lKk9sYx40W3","executionInfo":{"status":"ok","timestamp":1725435140554,"user_tz":-480,"elapsed":310,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"400effb8-0cbf-42d0-f02a-f37a51110f7e"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                Open       High        Low      Close  Volume\n","Date                                                                         \n","1927-12-30 00:00:00-05:00  17.660000  17.660000  17.660000  17.660000       0\n","1928-01-03 00:00:00-05:00  17.760000  17.760000  17.760000  17.760000       0\n","1928-01-04 00:00:00-05:00  17.719999  17.719999  17.719999  17.719999       0\n","1928-01-05 00:00:00-05:00  17.549999  17.549999  17.549999  17.549999       0\n","1928-01-06 00:00:00-05:00  17.660000  17.660000  17.660000  17.660000       0"],"text/html":["\n","  <div id=\"df-eb1ab016-8099-43aa-bcbf-34f817cfef5b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1927-12-30 00:00:00-05:00</th>\n","      <td>17.660000</td>\n","      <td>17.660000</td>\n","      <td>17.660000</td>\n","      <td>17.660000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1928-01-03 00:00:00-05:00</th>\n","      <td>17.760000</td>\n","      <td>17.760000</td>\n","      <td>17.760000</td>\n","      <td>17.760000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1928-01-04 00:00:00-05:00</th>\n","      <td>17.719999</td>\n","      <td>17.719999</td>\n","      <td>17.719999</td>\n","      <td>17.719999</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1928-01-05 00:00:00-05:00</th>\n","      <td>17.549999</td>\n","      <td>17.549999</td>\n","      <td>17.549999</td>\n","      <td>17.549999</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1928-01-06 00:00:00-05:00</th>\n","      <td>17.660000</td>\n","      <td>17.660000</td>\n","      <td>17.660000</td>\n","      <td>17.660000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb1ab016-8099-43aa-bcbf-34f817cfef5b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eb1ab016-8099-43aa-bcbf-34f817cfef5b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eb1ab016-8099-43aa-bcbf-34f817cfef5b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fe8eff87-a7c7-48a6-8009-5b1e8b1efe04\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe8eff87-a7c7-48a6-8009-5b1e8b1efe04')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fe8eff87-a7c7-48a6-8009-5b1e8b1efe04 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"sp500_cleaned","summary":"{\n  \"name\": \"sp500_cleaned\",\n  \"rows\": 24284,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 24284,\n        \"samples\": [\n          \"2022-06-10 00:00:00-04:00\",\n          \"1968-02-16 00:00:00-05:00\",\n          \"1990-06-21 00:00:00-04:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1054.7905953685338,\n        \"min\": 0.0,\n        \"max\": 5644.08984375,\n        \"num_unique_values\": 13652,\n        \"samples\": [\n          1311.1300048828125,\n          3244.669921875,\n          297.1600036621094\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1049.5397784186118,\n        \"min\": 4.400000095367432,\n        \"max\": 5669.669921875,\n        \"num_unique_values\": 16765,\n        \"samples\": [\n          655.8599853515625,\n          97.69000244140624,\n          104.12000274658205\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1037.727164524748,\n        \"min\": 4.400000095367432,\n        \"max\": 5639.02001953125,\n        \"num_unique_values\": 16762,\n        \"samples\": [\n          671.22998046875,\n          804.469970703125,\n          41.18000030517578\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1044.001680965475,\n        \"min\": 4.400000095367432,\n        \"max\": 5667.2001953125,\n        \"num_unique_values\": 16763,\n        \"samples\": [\n          1089.4100341796875,\n          326.45001220703125,\n          2002.6099853515625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1619831830,\n        \"min\": 0,\n        \"max\": 11456230000,\n        \"num_unique_values\": 13009,\n        \"samples\": [\n          49560000,\n          1527800000,\n          3485710000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["# Create the 'Tomorrow' column by shifting the 'Close' column by -1\n","sp500_cleaned['Tomorrow'] = sp500_cleaned['Close'].shift(-1)"],"metadata":{"id":"1649KkUl5Xrf","executionInfo":{"status":"ok","timestamp":1725435142587,"user_tz":-480,"elapsed":312,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["# Create the 'Target' column with Boolean values\n","sp500_cleaned['Target'] = sp500_cleaned['Tomorrow'] > sp500_cleaned['Close']"],"metadata":{"id":"JzWCYJiK5gG4","executionInfo":{"status":"ok","timestamp":1725435143894,"user_tz":-480,"elapsed":300,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["# Remove all data before 1990\n","sp500_filtered = sp500_cleaned[sp500_cleaned.index >= '1990-01-01']"],"metadata":{"id":"lBMVak7H5y7o","executionInfo":{"status":"ok","timestamp":1725435145495,"user_tz":-480,"elapsed":290,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["sp500_filtered"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"wSELAzvK53Vo","executionInfo":{"status":"ok","timestamp":1725435146725,"user_tz":-480,"elapsed":17,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"11190b1a-9c6d-46e5-e97f-68dfe2934c49"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                  Open         High          Low        Close  \\\n","Date                                                                            \n","1990-01-02 00:00:00-05:00   353.399994   359.690002   351.980011   359.690002   \n","1990-01-03 00:00:00-05:00   359.690002   360.589996   357.890015   358.760010   \n","1990-01-04 00:00:00-05:00   358.760010   358.760010   352.890015   355.670013   \n","1990-01-05 00:00:00-05:00   355.670013   355.670013   351.350006   352.200012   \n","1990-01-08 00:00:00-05:00   352.200012   354.239990   350.540009   353.790009   \n","...                                ...          ...          ...          ...   \n","2024-08-27 00:00:00-04:00  5602.890137  5631.180176  5593.479980  5625.799805   \n","2024-08-28 00:00:00-04:00  5624.509766  5627.029785  5560.950195  5592.180176   \n","2024-08-29 00:00:00-04:00  5607.299805  5646.950195  5583.709961  5591.959961   \n","2024-08-30 00:00:00-04:00  5612.740234  5651.370117  5581.790039  5648.399902   \n","2024-09-03 00:00:00-04:00  5623.890137  5623.890137  5504.330078  5528.930176   \n","\n","                               Volume     Tomorrow  Target  \n","Date                                                        \n","1990-01-02 00:00:00-05:00   162070000   358.760010   False  \n","1990-01-03 00:00:00-05:00   192330000   355.670013   False  \n","1990-01-04 00:00:00-05:00   177000000   352.200012   False  \n","1990-01-05 00:00:00-05:00   158530000   353.790009    True  \n","1990-01-08 00:00:00-05:00   140110000   349.619995   False  \n","...                               ...          ...     ...  \n","2024-08-27 00:00:00-04:00  2798990000  5592.180176   False  \n","2024-08-28 00:00:00-04:00  3053450000  5591.959961   False  \n","2024-08-29 00:00:00-04:00  3065640000  5648.399902    True  \n","2024-08-30 00:00:00-04:00  4185850000  5528.930176   False  \n","2024-09-03 00:00:00-04:00  3866350000          NaN   False  \n","\n","[8734 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-ed45c60c-cc71-4b99-a9a2-df10cee9a484\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Tomorrow</th>\n","      <th>Target</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1990-01-02 00:00:00-05:00</th>\n","      <td>353.399994</td>\n","      <td>359.690002</td>\n","      <td>351.980011</td>\n","      <td>359.690002</td>\n","      <td>162070000</td>\n","      <td>358.760010</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1990-01-03 00:00:00-05:00</th>\n","      <td>359.690002</td>\n","      <td>360.589996</td>\n","      <td>357.890015</td>\n","      <td>358.760010</td>\n","      <td>192330000</td>\n","      <td>355.670013</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1990-01-04 00:00:00-05:00</th>\n","      <td>358.760010</td>\n","      <td>358.760010</td>\n","      <td>352.890015</td>\n","      <td>355.670013</td>\n","      <td>177000000</td>\n","      <td>352.200012</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1990-01-05 00:00:00-05:00</th>\n","      <td>355.670013</td>\n","      <td>355.670013</td>\n","      <td>351.350006</td>\n","      <td>352.200012</td>\n","      <td>158530000</td>\n","      <td>353.790009</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1990-01-08 00:00:00-05:00</th>\n","      <td>352.200012</td>\n","      <td>354.239990</td>\n","      <td>350.540009</td>\n","      <td>353.790009</td>\n","      <td>140110000</td>\n","      <td>349.619995</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2024-08-27 00:00:00-04:00</th>\n","      <td>5602.890137</td>\n","      <td>5631.180176</td>\n","      <td>5593.479980</td>\n","      <td>5625.799805</td>\n","      <td>2798990000</td>\n","      <td>5592.180176</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2024-08-28 00:00:00-04:00</th>\n","      <td>5624.509766</td>\n","      <td>5627.029785</td>\n","      <td>5560.950195</td>\n","      <td>5592.180176</td>\n","      <td>3053450000</td>\n","      <td>5591.959961</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2024-08-29 00:00:00-04:00</th>\n","      <td>5607.299805</td>\n","      <td>5646.950195</td>\n","      <td>5583.709961</td>\n","      <td>5591.959961</td>\n","      <td>3065640000</td>\n","      <td>5648.399902</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2024-08-30 00:00:00-04:00</th>\n","      <td>5612.740234</td>\n","      <td>5651.370117</td>\n","      <td>5581.790039</td>\n","      <td>5648.399902</td>\n","      <td>4185850000</td>\n","      <td>5528.930176</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2024-09-03 00:00:00-04:00</th>\n","      <td>5623.890137</td>\n","      <td>5623.890137</td>\n","      <td>5504.330078</td>\n","      <td>5528.930176</td>\n","      <td>3866350000</td>\n","      <td>NaN</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8734 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed45c60c-cc71-4b99-a9a2-df10cee9a484')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ed45c60c-cc71-4b99-a9a2-df10cee9a484 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ed45c60c-cc71-4b99-a9a2-df10cee9a484');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5258a8fc-5c94-456f-a08c-c7982fba7486\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5258a8fc-5c94-456f-a08c-c7982fba7486')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5258a8fc-5c94-456f-a08c-c7982fba7486 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"sp500_filtered","summary":"{\n  \"name\": \"sp500_filtered\",\n  \"rows\": 8734,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 8734,\n        \"samples\": [\n          \"2001-12-31 00:00:00-05:00\",\n          \"1996-10-21 00:00:00-04:00\",\n          \"1994-12-29 00:00:00-05:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1190.1263286365777,\n        \"min\": 295.45001220703125,\n        \"max\": 5644.08984375,\n        \"num_unique_values\": 8523,\n        \"samples\": [\n          3340.050048828125,\n          1127.5699462890625,\n          2896.85009765625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1196.196869958869,\n        \"min\": 301.45001220703125,\n        \"max\": 5669.669921875,\n        \"num_unique_values\": 8475,\n        \"samples\": [\n          2868.780029296875,\n          2708.070068359375,\n          946.9199829101562\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1183.7182013523466,\n        \"min\": 294.510009765625,\n        \"max\": 5639.02001953125,\n        \"num_unique_values\": 8530,\n        \"samples\": [\n          1376.25,\n          3906.030029296875,\n          2554.68994140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1190.3043482752223,\n        \"min\": 295.4599914550781,\n        \"max\": 5667.2001953125,\n        \"num_unique_values\": 8517,\n        \"samples\": [\n          3333.68994140625,\n          1525.4000244140625,\n          1452.1800537109375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1844569956,\n        \"min\": 14990000,\n        \"max\": 11456230000,\n        \"num_unique_values\": 8497,\n        \"samples\": [\n          3364140000,\n          232670000,\n          438300000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tomorrow\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1190.2918646156213,\n        \"min\": 295.4599914550781,\n        \"max\": 5667.2001953125,\n        \"num_unique_values\": 8516,\n        \"samples\": [\n          3901.360107421875,\n          845.47998046875,\n          1502.1700439453125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Target\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","source":["**Preparing Our Target for Machine Learning**"],"metadata":{"id":"InkNPKV2-fw6"}},{"cell_type":"code","source":["# Prepare features and target variable\n","X = sp500_filtered[['Open', 'High', 'Low', 'Close', 'Volume']]  # Features\n","y = sp500_filtered['Target']  # Target variable"],"metadata":{"id":"0toeU-Cu8Ctp","executionInfo":{"status":"ok","timestamp":1725435148807,"user_tz":-480,"elapsed":293,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["# Split the data into train and test sets, respecting the order\n","train_size = int(len(X) * 0.8)  # 80% for training\n","X_train, X_test = X[:train_size], X[train_size:]\n","y_train, y_test = y[:train_size], y[train_size:]"],"metadata":{"id":"iEJmxbDm8xfg","executionInfo":{"status":"ok","timestamp":1725435183711,"user_tz":-480,"elapsed":295,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["# Initialize the RandomForestClassifier\n","model = RandomForestClassifier(n_estimators=100, random_state=42)"],"metadata":{"id":"ttGloOkc88Cp","executionInfo":{"status":"ok","timestamp":1725435209521,"user_tz":-480,"elapsed":307,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":50,"outputs":[]},{"cell_type":"markdown","source":["**Training an Initial Machine Learning Model**"],"metadata":{"id":"l6y4Kjx3-qMp"}},{"cell_type":"code","source":["# Fit the model to the training dataset\n","model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"3M42xRYO89tJ","executionInfo":{"status":"ok","timestamp":1725435216112,"user_tz":-480,"elapsed":4911,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"8a7e0e7e-01ab-4c87-de60-03299b464a6c"},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["# Create predictions on the test set\n","predictions = model.predict(X_test)"],"metadata":{"id":"OjBSojxu9BRJ","executionInfo":{"status":"ok","timestamp":1725435223202,"user_tz":-480,"elapsed":281,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["# Measure the model's accuracy with precision_score\n","precision = precision_score(y_test, predictions)\n"],"metadata":{"id":"Z3Ek3Uxb9DcR","executionInfo":{"status":"ok","timestamp":1725435232068,"user_tz":-480,"elapsed":6,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["# Print the precision score\n","print(f\"Precision Score: {precision:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sfNaDALA9FVg","executionInfo":{"status":"ok","timestamp":1725435239993,"user_tz":-480,"elapsed":272,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"eba9cbc3-c273-4809-836f-f0c99e5635ae"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Precision Score: 0.5354\n"]}]},{"cell_type":"code","source":["# Create a DataFrame to combine actual values and predictions\n","results = pd.DataFrame({'Actual': y_test, 'Predicted': predictions}, index=X_test.index)"],"metadata":{"id":"M8swX_lt9HoY","executionInfo":{"status":"ok","timestamp":1725435249525,"user_tz":-480,"elapsed":4,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["# Plot the actual values and predictions\n","plt.figure(figsize=(14, 7))\n","plt.plot(results.index, results['Actual'], label='Actual', color='blue', alpha=0.6)\n","plt.plot(results.index, results['Predicted'], label='Predicted', color='red', alpha=0.6)\n","plt.title('Actual vs Predicted Values')\n","plt.xlabel('Date')\n","plt.ylabel('Target')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":641},"id":"BkbwIx9E9Lph","executionInfo":{"status":"ok","timestamp":1725435301608,"user_tz":-480,"elapsed":36072,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"cc679164-e4d1-4fc1-ab5b-3bcbd5969977"},"execution_count":56,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Building a Backtesting System**"],"metadata":{"id":"ZZZ5agJk-6Gi"}},{"cell_type":"code","source":["import yfinance as yf\n","import pandas as pd\n","import os\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import precision_score, accuracy_score, f1_score\n","import matplotlib.pyplot as plt"],"metadata":{"id":"AaJMYSph-9ci","executionInfo":{"status":"ok","timestamp":1725437302758,"user_tz":-480,"elapsed":299,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":78,"outputs":[]},{"cell_type":"code","source":["def split_train_test(df, train_size=0.8):\n","    \"\"\"\n","    Split the DataFrame into training and testing sets, respecting the order of the data.\n","\n","    Args:\n","        df (pandas.DataFrame): The DataFrame to be split.\n","        train_size (float): The proportion of the data to be used for training (default is 0.8).\n","\n","    Returns:\n","        tuple: A tuple containing the training and testing sets for features (X) and target (y).\n","    \"\"\"\n","    X = df[['Open', 'High', 'Low', 'Close', 'Volume']]  # Features\n","    y = df['Target']  # Target variable\n","\n","    train_size = int(len(X) * train_size)\n","    X_train, X_test = X[:train_size], X[train_size:]\n","    y_train, y_test = y[:train_size], y[train_size:]\n","\n","    return X_train, X_test, y_train, y_test"],"metadata":{"id":"hA-Mvmw__Duy","executionInfo":{"status":"ok","timestamp":1725437304151,"user_tz":-480,"elapsed":316,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":79,"outputs":[]},{"cell_type":"code","source":["def train_model(X_train, y_train):\n","    \"\"\"\n","    Train a RandomForestClassifier model on the training data.\n","\n","    Args:\n","        X_train (pandas.DataFrame): The training features.\n","        y_train (pandas.Series): The training target variable.\n","\n","    Returns:\n","        sklearn.ensemble.RandomForestClassifier: The trained model.\n","    \"\"\"\n","    model = RandomForestClassifier(n_estimators=100, random_state=42)\n","    model.fit(X_train, y_train)\n","    return model"],"metadata":{"id":"GnSNBAG1_NBa","executionInfo":{"status":"ok","timestamp":1725437309518,"user_tz":-480,"elapsed":318,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":80,"outputs":[]},{"cell_type":"code","source":["def make_predictions(model, X_test, threshold=0.5):\n","    \"\"\"\n","    Make predictions using the trained model on the test data with a custom threshold.\n","\n","    Args:\n","        model (sklearn.ensemble.RandomForestClassifier): The trained model.\n","        X_test (pandas.DataFrame): The test features.\n","        threshold (float): The custom threshold for prediction (default is 0.5).\n","\n","    Returns:\n","        numpy.ndarray: The predicted labels.\n","    \"\"\"\n","    probabilities = model.predict_proba(X_test)\n","    predictions = (probabilities[:, 1] >= threshold).astype(int)\n","    return predictions"],"metadata":{"id":"wcCfq2TS_aki","executionInfo":{"status":"ok","timestamp":1725437326155,"user_tz":-480,"elapsed":283,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":81,"outputs":[]},{"cell_type":"code","source":["def backtest(start_year, end_year, threshold=0.5):\n","    \"\"\"\n","    Perform a backtest on the S&P 500 data for the specified years.\n","\n","    Args:\n","        start_year (int): The starting year for the backtest.\n","        end_year (int): The ending year for the backtest.\n","\n","    Returns:\n","        tuple: A tuple containing the accuracy, precision, and F1-score of the model.\n","    \"\"\"\n","    # Load the data\n","    if os.path.exists(\"sp500.csv\"):\n","        sp500 = pd.read_csv(\"sp500.csv\", index_col=0)\n","    else:\n","        sp500 = yf.Ticker(\"^GSPC\")\n","        sp500 = sp500.history(period=\"max\")\n","        sp500.to_csv(\"sp500.csv\")\n","\n","    # Clean the data\n","    sp500_cleaned = sp500.drop(columns=[\"Dividends\", \"Stock Splits\"])\n","    sp500_cleaned['Tomorrow'] = sp500_cleaned['Close'].shift(-1)\n","    sp500_cleaned['Target'] = sp500_cleaned['Tomorrow'] > sp500_cleaned['Close']\n","\n","    # Filter data based on start and end years\n","    start_date = f\"{start_year}-01-01\"\n","    end_date = f\"{end_year}-12-31\"\n","    sp500_filtered = sp500_cleaned.loc[start_date:end_date]\n","\n","    # Split data into train and test sets\n","    X_train, X_test, y_train, y_test = split_train_test(sp500_filtered)\n","\n","    # Train the model\n","    model = train_model(X_train, y_train)\n","\n","    # Make predictions with the custom threshold\n","    predictions = make_predictions(model, X_test, threshold)\n","\n","    # Evaluate the model\n","    accuracy = accuracy_score(y_test, predictions)\n","    precision = precision_score(y_test, predictions)\n","    f1 = f1_score(y_test, predictions)\n","\n","    return accuracy, precision, f1"],"metadata":{"id":"P1HlLg2c_kJi","executionInfo":{"status":"ok","timestamp":1725437629496,"user_tz":-480,"elapsed":329,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}}},"execution_count":84,"outputs":[]},{"cell_type":"code","source":["# Run the backtest for 2010-2019 with a custom threshold of 0.6\n","accuracy, precision, f1 = backtest(2010, 2019, threshold=0.6)\n","print(f\"Accuracy: {accuracy:.4f}\")\n","print(f\"Precision: {precision:.4f}\")\n","print(f\"F1-score: {f1:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J-7lqsbLASEK","executionInfo":{"status":"ok","timestamp":1725437633874,"user_tz":-480,"elapsed":1789,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"dd757d46-18b1-440b-deb3-30309b3804e4"},"execution_count":85,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.4453\n","Precision: 0.5652\n","F1-score: 0.0852\n"]}]},{"cell_type":"markdown","source":["**Adding Additional Predictors to Our Model**"],"metadata":{"id":"tziPKabTC_zG"}},{"cell_type":"code","source":["# Add rolling average columns\n","sp500_filtered['5-Day MA'] = sp500_filtered['Close'].rolling(window=5).mean()\n","sp500_filtered['10-Day MA'] = sp500_filtered['Close'].rolling(window=10).mean()\n","sp500_filtered['20-Day MA'] = sp500_filtered['Close'].rolling(window=20).mean()\n","sp500_filtered['50-Day MA'] = sp500_filtered['Close'].rolling(window=50).mean()\n","sp500_filtered['100-Day MA'] = sp500_filtered['Close'].rolling(window=100).mean()\n","sp500_filtered['200-Day MA'] = sp500_filtered['Close'].rolling(window=200).mean()\n","\n","# Display the updated DataFrame with rolling averages\n","sp500_filtered[['Close', '5-Day MA', '10-Day MA', '20-Day MA', '50-Day MA', '100-Day MA', '200-Day MA']]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Vuv4qt-2DCYc","executionInfo":{"status":"ok","timestamp":1725436872077,"user_tz":-480,"elapsed":339,"user":{"displayName":"Shiu Kong Yu","userId":"09728472925577884812"}},"outputId":"d5b1cb57-fc58-4a31-e4e6-2327604679b0"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-67-b236b03ec7ea>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  sp500_filtered['5-Day MA'] = sp500_filtered['Close'].rolling(window=5).mean()\n","<ipython-input-67-b236b03ec7ea>:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  sp500_filtered['10-Day MA'] = sp500_filtered['Close'].rolling(window=10).mean()\n","<ipython-input-67-b236b03ec7ea>:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  sp500_filtered['20-Day MA'] = sp500_filtered['Close'].rolling(window=20).mean()\n","<ipython-input-67-b236b03ec7ea>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  sp500_filtered['50-Day MA'] = sp500_filtered['Close'].rolling(window=50).mean()\n","<ipython-input-67-b236b03ec7ea>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  sp500_filtered['100-Day MA'] = sp500_filtered['Close'].rolling(window=100).mean()\n","<ipython-input-67-b236b03ec7ea>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  sp500_filtered['200-Day MA'] = sp500_filtered['Close'].rolling(window=200).mean()\n"]},{"output_type":"execute_result","data":{"text/plain":["                                 Close     5-Day MA    10-Day MA    20-Day MA  \\\n","Date                                                                            \n","1990-01-02 00:00:00-05:00   359.690002          NaN          NaN          NaN   \n","1990-01-03 00:00:00-05:00   358.760010          NaN          NaN          NaN   \n","1990-01-04 00:00:00-05:00   355.670013          NaN          NaN          NaN   \n","1990-01-05 00:00:00-05:00   352.200012          NaN          NaN          NaN   \n","1990-01-08 00:00:00-05:00   353.790009   356.022009          NaN          NaN   \n","...                                ...          ...          ...          ...   \n","2024-08-27 00:00:00-04:00  5625.799805  5613.747949  5582.679004  5460.524023   \n","2024-08-28 00:00:00-04:00  5592.180176  5608.013965  5596.376025  5464.018042   \n","2024-08-29 00:00:00-04:00  5591.959961  5612.277930  5601.250000  5471.282031   \n","2024-08-30 00:00:00-04:00  5648.399902  5615.035937  5610.664990  5486.374023   \n","2024-09-03 00:00:00-04:00  5528.930176  5597.454004  5602.733008  5503.504028   \n","\n","                             50-Day MA   100-Day MA   200-Day MA  \n","Date                                                              \n","1990-01-02 00:00:00-05:00          NaN          NaN          NaN  \n","1990-01-03 00:00:00-05:00          NaN          NaN          NaN  \n","1990-01-04 00:00:00-05:00          NaN          NaN          NaN  \n","1990-01-05 00:00:00-05:00          NaN          NaN          NaN  \n","1990-01-08 00:00:00-05:00          NaN          NaN          NaN  \n","...                                ...          ...          ...  \n","2024-08-27 00:00:00-04:00  5495.215020  5352.534717  5109.639961  \n","2024-08-28 00:00:00-04:00  5497.594023  5356.413120  5115.864111  \n","2024-08-29 00:00:00-04:00  5499.692627  5360.308818  5121.747710  \n","2024-08-30 00:00:00-04:00  5503.197227  5364.693716  5127.931960  \n","2024-09-03 00:00:00-04:00  5504.483428  5368.376616  5133.098110  \n","\n","[8734 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-503736f1-7025-4d3e-8f3a-b3e550dccac6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Close</th>\n","      <th>5-Day MA</th>\n","      <th>10-Day MA</th>\n","      <th>20-Day MA</th>\n","      <th>50-Day MA</th>\n","      <th>100-Day MA</th>\n","      <th>200-Day MA</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1990-01-02 00:00:00-05:00</th>\n","      <td>359.690002</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1990-01-03 00:00:00-05:00</th>\n","      <td>358.760010</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1990-01-04 00:00:00-05:00</th>\n","      <td>355.670013</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1990-01-05 00:00:00-05:00</th>\n","      <td>352.200012</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1990-01-08 00:00:00-05:00</th>\n","      <td>353.790009</td>\n","      <td>356.022009</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2024-08-27 00:00:00-04:00</th>\n","      <td>5625.799805</td>\n","      <td>5613.747949</td>\n","      <td>5582.679004</td>\n","      <td>5460.524023</td>\n","      <td>5495.215020</td>\n","      <td>5352.534717</td>\n","      <td>5109.639961</td>\n","    </tr>\n","    <tr>\n","      <th>2024-08-28 00:00:00-04:00</th>\n","      <td>5592.180176</td>\n","      <td>5608.013965</td>\n","      <td>5596.376025</td>\n","      <td>5464.018042</td>\n","      <td>5497.594023</td>\n","      <td>5356.413120</td>\n","      <td>5115.864111</td>\n","    </tr>\n","    <tr>\n","      <th>2024-08-29 00:00:00-04:00</th>\n","      <td>5591.959961</td>\n","      <td>5612.277930</td>\n","      <td>5601.250000</td>\n","      <td>5471.282031</td>\n","      <td>5499.692627</td>\n","      <td>5360.308818</td>\n","      <td>5121.747710</td>\n","    </tr>\n","    <tr>\n","      <th>2024-08-30 00:00:00-04:00</th>\n","      <td>5648.399902</td>\n","      <td>5615.035937</td>\n","      <td>5610.664990</td>\n","      <td>5486.374023</td>\n","      <td>5503.197227</td>\n","      <td>5364.693716</td>\n","      <td>5127.931960</td>\n","    </tr>\n","    <tr>\n","      <th>2024-09-03 00:00:00-04:00</th>\n","      <td>5528.930176</td>\n","      <td>5597.454004</td>\n","      <td>5602.733008</td>\n","      <td>5503.504028</td>\n","      <td>5504.483428</td>\n","      <td>5368.376616</td>\n","      <td>5133.098110</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8734 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-503736f1-7025-4d3e-8f3a-b3e550dccac6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-503736f1-7025-4d3e-8f3a-b3e550dccac6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-503736f1-7025-4d3e-8f3a-b3e550dccac6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-65b63d42-e9da-47ca-8798-b57045ea658d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-65b63d42-e9da-47ca-8798-b57045ea658d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-65b63d42-e9da-47ca-8798-b57045ea658d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"sp500_filtered[['Close', '5-Day MA', '10-Day MA', '20-Day MA', '50-Day MA', '100-Day MA', '200-Day MA']]\",\n  \"rows\": 8734,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 8734,\n        \"samples\": [\n          \"2001-12-31 00:00:00-05:00\",\n          \"1996-10-21 00:00:00-04:00\",\n          \"1994-12-29 00:00:00-05:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1190.3043482752223,\n        \"min\": 295.4599914550781,\n        \"max\": 5667.2001953125,\n        \"num_unique_values\": 8517,\n        \"samples\": [\n          3333.68994140625,\n          1525.4000244140625,\n          1452.1800537109375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"5-Day MA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1188.774152788189,\n        \"min\": 299.2800048828125,\n        \"max\": 5626.444140625,\n        \"num_unique_values\": 8704,\n        \"samples\": [\n          1139.32998046875,\n          1021.0919921875,\n          1373.465966796875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"10-Day MA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1186.872439402276,\n        \"min\": 303.26100463867186,\n        \"max\": 5610.664990234375,\n        \"num_unique_values\": 8710,\n        \"samples\": [\n          458.65,\n          1217.6789794921874,\n          2210.6050048828124\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"20-Day MA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1183.1629681367108,\n        \"min\": 305.832502746582,\n        \"max\": 5550.946020507812,\n        \"num_unique_values\": 8713,\n        \"samples\": [\n          1923.9075012207031,\n          559.7399993896485,\n          928.9570007324219\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50-Day MA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1172.4259040725847,\n        \"min\": 310.20980163574217,\n        \"max\": 5504.483427734375,\n        \"num_unique_values\": 8683,\n        \"samples\": [\n          376.76419921875,\n          320.99080139160156,\n          785.2596044921875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"100-Day MA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1154.813195925826,\n        \"min\": 316.46680145263673,\n        \"max\": 5368.376616210938,\n        \"num_unique_values\": 8635,\n        \"samples\": [\n          666.5516998291016,\n          1388.1118969726563,\n          1919.5579956054687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"200-Day MA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1122.5705964804363,\n        \"min\": 332.5554504394531,\n        \"max\": 5133.098110351562,\n        \"num_unique_values\": 8532,\n        \"samples\": [\n          1238.9829498291015,\n          4253.000494384765,\n          1285.3252020263672\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":67}]}]}